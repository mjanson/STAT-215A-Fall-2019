labs(title = "K-means clustering (k = 3)",
color = "Clusters")
k <- 3  # set number of clusters
# k-means using all variables
kmeans_raw <- kmeans(scale(wines),
centers = k)
ggplot(wine_scores) +
aes(x = PC1, y = PC2, color = as.factor(kmeans_raw$cluster)) +
geom_point() +
labs(title = "K-means clustering (k = 3)",
color = "Clusters")
k <- 3  # set number of clusters
# k-means using all variables
kmeans_raw <- kmeans(scale(wines),
centers = k)
ggplot(wine_scores) +
aes(x = PC1, y = PC2, color = as.factor(kmeans_raw$cluster)) +
geom_point() +
labs(title = "K-means clustering (k = 3)",
color = "Clusters")
tcga_kmeans <- kmeans(X, centers = 4)
ggplot(scores) +
aes(x = PC1, y = PC2, color = as.factor(tcga_kmeans$cluster)) +
geom_point() +
labs(title = "TCGA BRCA K-means clustering (k = 4)",
color = "Clusters")
tcga_kmeans <- kmeans(X, centers = 4)
ggplot(scores) +
aes(x = PC1, y = PC2, color = as.factor(tcga_kmeans$cluster)) +
geom_point() +
labs(title = "TCGA BRCA K-means clustering (k = 4)",
color = "Clusters")
tcga_kmeans <- kmeans(X, centers = 4)
ggplot(scores) +
aes(x = PC1, y = PC2, color = as.factor(tcga_kmeans$cluster)) +
geom_point() +
labs(title = "TCGA BRCA K-means clustering (k = 4)",
color = "Clusters")
kmeans_k3 <- lapply(1:4, function(k) {
return(kmeans(scale(wines), centers = 3)$clusters)
})
library(ggpubr)
kmeans_k3 <- lapply(1:4, function(k) {
return(kmeans(scale(wines), centers = 3)$clusters)
})
# plot the resulting clusters from each run of kmeans
plt_kmeans_k3 <- lapply(kmeans_k3, function(clust) {
ggplot(wine_scores) +
aes(x = PC1, y = PC2, color = as.factor(clust)) +
geom_point() +
labs(color = "Cluster")
})
ggarrange(plotlist = plt_kmeans_k3, common.legend = T)
str(kmeans_k3)
kmeans_k3 <- lapply(1:4, function(k) {
return(kmeans(scale(wines), centers = 3)$cluster)
})
# plot the resulting clusters from each run of kmeans
plt_kmeans_k3 <- lapply(kmeans_k3, function(clust) {
ggplot(wine_scores) +
aes(x = PC1, y = PC2, color = as.factor(clust)) +
geom_point() +
labs(color = "Cluster")
})
ggarrange(plotlist = plt_kmeans_k3, common.legend = T)
ggarrange(plotlist = plt_kmeans_k3,
common.legend = T, nrow = 2, legend = "bottom")
? ggarrange
ggarrange(plotlist = plt_kmeans_k3,
common.legend = T, nrow = 2, ncol = 2, legend = "bottom")
kmeans_ks <- lapply(ks, function(k) {
lapply(1:ntrials, function(trial) {
return(kmeans(scale(wines), centers = k)$cluster)
})
})
ks <- c(2, 3, 6)
ntrials <- 4
kmeans_ks <- lapply(ks, function(k) {
lapply(1:ntrials, function(trial) {
return(kmeans(scale(wines), centers = k)$cluster)
})
})
str(kmeans_ks)
# setting default knitr options
knitr::opts_chunk$set(
echo = FALSE,
warning = FALSE,
message = FALSE,
fig.out = "100%",
fig.align = "center",
fig.pos = "H",
cache = TRUE)
# load useful libraries
library(tidyverse)
library(R.utils)
library(GGally)
library(irlba)
library(ggpubr)
# plot the resulting clusters from each run of kmeans
plt_kmeans <- lapply(kmeans_ks, function(kmeans_k) {
lapply(kmeans_k, function(clust) {
ggplot(wine_scores) +
aes(x = PC1, y = PC2, color = as.factor(clust)) +
geom_point() +
labs(color = "Cluster")
})
})
str(plt_kmeans)
length(plt_kmeans)
length(unlist(plt_kmeans))
plt_kmeans <- c(plt_kmeans[[1]], plt_kmeans[[2]], plt_kmeans[[3]])
length(plt_kmeans)
ggarrange(plotlist = plt_kmeans,
common.legend = T, nrow = 3, ncol = 4, legend = "bottom")
4
# ks to try
ks <- c(2, 3, 6)
ntrials <- 4  # number of repititions for each k
kmeans_ks <- lapply(ks, function(k) {
lapply(1:ntrials, function(trial) {
return(kmeans(scale(wines), centers = k)$cluster)
})
})
# plot the resulting clusters from each run of kmeans
plt_kmeans <- lapply(kmeans_ks, function(kmeans_k) {
lapply(kmeans_k, function(clust) {
ggplot(wine_scores) +
aes(x = PC1, y = PC2, color = as.factor(clust)) +
geom_point() +
labs(color = "Cluster")
})
})
names(plt_kmeans) <- ks
plt_kmeans[[ks[1]]]
for (k in ks) {
ggarrange(plotlist = plt_kmeans[[k]],
common.legend = T, nrow = 3, ncol = 1, legend = "bottom")
}
for (i in 1:length(ks)) {
ggarrange(plotlist = plt_kmeans[[ks[i]]],
common.legend = T, nrow = 3, ncol = 1, legend = "bottom")
}
for (i in 1:length(ks)) {
ggarrange(plotlist = plt_kmeans[ks[i]],
common.legend = T, nrow = 3, ncol = 1, legend = "bottom")
}
plts <- list()
for (i in 1:length(ks)) {
plts[[i]] <- ggarrange(plotlist = plt_kmeans[ks[i]],
common.legend = T, nrow = 3, ncol = 1,
legend = "bottom")
}
plts[[1]]
4
plts[[1]]
i = 1
ggarrange(plotlist = plt_kmeans[ks[i]],
common.legend = T, nrow = 3, ncol = 1,
legend = "bottom")
length(plt_kmeans[ks[1]])
plts <- list()
for (i in 1:length(ks)) {
plts[[i]] <- ggarrange(plotlist = plt_kmeans[[i]],
common.legend = T, nrow = 3, ncol = 1,
legend = "bottom")
}
plts[[1]]
for (i in 1:length(ks)) {
ggarrange(plotlist = plt_kmeans[[i]],
common.legend = T, nrow = 2, ncol = 2, legend = "bottom")
}
1
plts <- list()
for (i in 1:length(ks)) {
plts[[i]] <- ggarrange(plotlist = plt_kmeans[[i]],
common.legend = T, nrow = 2, ncol = 2,
legend = "bottom")
}
plts[[1]]
plts[[2]]
plts[[3]]
ks <- c(2, 3, 6)  # ks to try
ntrials <- 4  # number of repititions for each k
# run kmeans multiple times
kmeans_ks <- lapply(ks, function(k) {
lapply(1:ntrials, function(trial) {
return(kmeans(X, centers = k)$cluster)
})
})
# make plot of the resulting clusters from each run of kmeans
plt_kmeans <- lapply(kmeans_ks, function(kmeans_k) {
lapply(kmeans_k, function(clust) {
ggplot(scores) +
aes(x = PC1, y = PC2, color = as.factor(clust)) +
geom_point() +
labs(color = "Cluster")
})
})
plts <- list()
for (i in 1:length(ks)) {
plts[[i]] <- ggarrange(plotlist = plt_kmeans[[i]],
common.legend = T, nrow = 2, ncol = 2,
legend = "bottom")
}
for (i in 1:length(ks)) {
print(plts[[i]])
}
tcga_kmeans <- kmeans(scores[, 1:100], centers = 4)
ggplot(scores) +
aes(x = PC1, y = PC2, color = as.factor(tcga_kmeans$cluster)) +
geom_point() +
labs(title = "TCGA BRCA K-means clustering (k = 4)",
color = "Clusters")
ggplot(scores) +
aes(x = PC1, y = PC2, color = as.factor(tcga_kmeans$cluster)) +
geom_point() +
labs(title = "TCGA BRCA K-means clustering (k = 4)",
color = "Clusters")
ggplot(scores) +
aes(x = PC1, y = PC2, color = as.factor(tcga_kmeans$cluster)) +
geom_point() +
labs(title = "TCGA BRCA K-means clustering (k = 4)",
color = "Clusters")
dist_mat <- dist(wines)
# setting default knitr options
knitr::opts_chunk$set(
echo = FALSE,
warning = FALSE,
message = FALSE,
fig.out = "100%",
fig.align = "center",
fig.pos = "H",
cache = TRUE)
# load useful libraries
library(tidyverse)
library(R.utils)
library(GGally)
library(irlba)
library(ggpubr)
# source all files in the R/ directory
sourceDirectory("./R/", modifiedOnly = F, recursive = F) # useful functions
brca_orig <- loadBRCAData()
X <- brca_orig$X
Y <- brca_orig$Y
str(X)
str(Y)
# run PCA
prcomp_out <- prcomp(x = X, center = FALSE, scale = FALSE)
str(prcomp_out)
summary(prcomp_out)
# plot PC scores
scores <- prcomp_out$x %>%
as.data.frame() %>%
mutate(Subtype = Y$BRCA_Subtype_PAM50)
prcomp_plt <- ggplot(scores) +
aes(x = PC1, y = PC2, color = Subtype) +
geom_point()
prcomp_plt
# look at PC diretions/loadings: which genes contribute most to the first PC
loadings <- prcomp_out$rotation %>%
as.data.frame() %>%
select(PC1) %>%
rownames_to_column("Gene") %>%
arrange(-abs(PC1))
head(loadings)
# compute cumulative proportion of variance explained
cum_var_ex <- cumsum(prcomp_out$sdev^2 / sum(prcomp_out$sdev^2))
# plot proportion of variance explained
plot(cum_var_ex,
xlab = "PCs", ylab = "Cumulative Prop of Var Ex")
# need 5 PCs to retain 75% of the variance in the data
which(cum_var_ex > 0.75)[1]
svd_out <- svd(X)
U <- svd_out$u
V <- svd_out$v
d <- svd_out$d
scores <- as.data.frame(U %*% diag(d)) %>%
setNames(paste("PC", 1:ncol(U), sep = "")) %>%
mutate(Subtype = Y$BRCA_Subtype_PAM50)
svd_pca_plt <- ggplot(scores) +
aes(x = PC1, y = PC2, color = Subtype) +
geom_point()
svd_pca_plt
prcomp_plt
npcs <- 5
ptm <- proc.time()  # Start the clock!
fast_svd_out <- irlba(as.matrix(X), nv = npcs) ## fill me in
proc.time() - ptm  # Stop the clock
# find out how long it takes to run PCA with prcomp
ptm <- proc.time()  # Start the clock!
pca_out <- prcomp(x = X, center = F, scale = F)
proc.time() - ptm  # Stop the clock
# find out how long it takes to run PCA by taking svd
ptm <- proc.time()  # Start the clock!
svd_out <- svd(X)
proc.time() - ptm  # Stop the clock
# compute variance explained using output of irlba
var_ex1 <- fast_svd_out$d^2 / norm(as.matrix(X), "F")^2
# compute variance explained using output of prcomp
var_ex2 <- (prcomp_out$sdev^2 / sum(prcomp_out$sdev^2))[1:npcs]
var_ex1
var_ex2
scores <- as.data.frame(fast_svd_out$u %*% diag(fast_svd_out$d)) %>%
setNames(paste("PC", 1:npcs, sep = "")) %>%
mutate(Subtype = Y$BRCA_Subtype_PAM50)
# plot pair plots
ggpairs(data = scores,
mapping = aes(color = Subtype),
columns = 1:npcs,
columnLabels = paste("PC", 1:npcs,
" (", round(var_ex1[1:npcs], 2), ")", sep = ""),
lower = list(continuous = wrap("points", alpha = .75, size = .5)),
diag = list(continuous = wrap("densityDiag", alpha = .5)),
upper = list(continuous = wrap("cor", size = 3)))
# load the wines dataset
wines_orig <- read.csv("./data/wines.csv")
# clean wines dataset
wines <- wines_orig %>%
setNames(c("cultivar", "alcohol", "malic acid", "ash",
"alcalinity of ash", "magnesium", "total phenols",
"flavanoids", "nonflavanoid phenols",
"proanthocyanins", "color intensity", "hue",
"OD280/OD315 of diluted wines", "proline")) %>%
mutate(cultivar = as.factor(cultivar))
cultivar <- wines$cultivar
wines <- select(wines, -cultivar)
wine_pca <- prcomp(x = wines, center = T, scale = T)
wine_scores <- as.data.frame(wine_pca$x) %>%
mutate(cultivar = cultivar)
ggplot(wine_scores) +
aes(x = PC1, y = PC2, color = cultivar) +
geom_point() +
ggtitle("Groupings based on cultivar")
# cluster wine data in original and PC spaces and plot along first two PCs
k <- 3  # set number of clusters
# k-means using all variables
kmeans_wine <- kmeans(scale(wines),
centers = k)
ggplot(wine_scores) +
aes(x = PC1, y = PC2, color = as.factor(kmeans_wine$cluster)) +
geom_point() +
labs(title = "K-means clustering (k = 3)",
color = "Clusters")
tcga_kmeans <- kmeans(scores[, 1:100], centers = 4)
tcga_kmeans <- kmeans(brca_scores[, 1:100], centers = 4)
# setting default knitr options
knitr::opts_chunk$set(
echo = FALSE,
warning = FALSE,
message = FALSE,
fig.out = "100%",
fig.align = "center",
fig.pos = "H",
cache = TRUE)
# load useful libraries
library(tidyverse)
library(R.utils)
library(GGally)
library(irlba)
library(ggpubr)
# source all files in the R/ directory
sourceDirectory("./R/", modifiedOnly = F, recursive = F) # useful functions
brca_orig <- loadBRCAData()
X <- brca_orig$X
Y <- brca_orig$Y
str(X)
str(Y)
# run PCA
prcomp_out <- prcomp(x = X, center = FALSE, scale = FALSE)
str(prcomp_out)
summary(prcomp_out)
# plot PC scores
brca_scores <- prcomp_out$x %>%
as.data.frame() %>%
mutate(Subtype = Y$BRCA_Subtype_PAM50)
prcomp_plt <- ggplot(brca_scores) +
aes(x = PC1, y = PC2, color = Subtype) +
geom_point()
prcomp_plt
# look at PC diretions/loadings: which genes contribute most to the first PC
brca_loadings <- prcomp_out$rotation %>%
as.data.frame() %>%
select(PC1) %>%
rownames_to_column("Gene") %>%
arrange(-abs(PC1))
head(brca_loadings)
# compute cumulative proportion of variance explained
cum_var_ex <- cumsum(prcomp_out$sdev^2 / sum(prcomp_out$sdev^2))
# plot proportion of variance explained
plot(cum_var_ex,
xlab = "PCs", ylab = "Cumulative Prop of Var Ex")
# need 5 PCs to retain 75% of the variance in the data
which(cum_var_ex > 0.75)[1]
svd_out <- svd(X)
U <- svd_out$u
V <- svd_out$v
d <- svd_out$d
brca_scores <- as.data.frame(U %*% diag(d)) %>%
setNames(paste("PC", 1:ncol(U), sep = "")) %>%
mutate(Subtype = Y$BRCA_Subtype_PAM50)
svd_pca_plt <- ggplot(brca_scores) +
aes(x = PC1, y = PC2, color = Subtype) +
geom_point()
svd_pca_plt
prcomp_plt
npcs <- 5
ptm <- proc.time()  # Start the clock!
fast_svd_out <- irlba(as.matrix(X), nv = npcs) ## fill me in
proc.time() - ptm  # Stop the clock
# find out how long it takes to run PCA with prcomp
ptm <- proc.time()  # Start the clock!
pca_out <- prcomp(x = X, center = F, scale = F)
proc.time() - ptm  # Stop the clock
# find out how long it takes to run PCA by taking svd
ptm <- proc.time()  # Start the clock!
svd_out <- svd(X)
proc.time() - ptm  # Stop the clock
# compute variance explained using output of irlba
var_ex1 <- fast_svd_out$d^2 / norm(as.matrix(X), "F")^2
# compute variance explained using output of prcomp
var_ex2 <- (prcomp_out$sdev^2 / sum(prcomp_out$sdev^2))[1:npcs]
var_ex1
var_ex2
brca_scores <- as.data.frame(fast_svd_out$u %*% diag(fast_svd_out$d)) %>%
setNames(paste("PC", 1:npcs, sep = "")) %>%
mutate(Subtype = Y$BRCA_Subtype_PAM50)
# plot pair plots
ggpairs(data = brca_scores,
mapping = aes(color = Subtype),
columns = 1:npcs,
columnLabels = paste("PC", 1:npcs,
" (", round(var_ex1[1:npcs], 2), ")", sep = ""),
lower = list(continuous = wrap("points", alpha = .75, size = .5)),
diag = list(continuous = wrap("densityDiag", alpha = .5)),
upper = list(continuous = wrap("cor", size = 3)))
# load the wines dataset
wines_orig <- read.csv("./data/wines.csv")
# clean wines dataset
wines <- wines_orig %>%
setNames(c("cultivar", "alcohol", "malic acid", "ash",
"alcalinity of ash", "magnesium", "total phenols",
"flavanoids", "nonflavanoid phenols",
"proanthocyanins", "color intensity", "hue",
"OD280/OD315 of diluted wines", "proline")) %>%
mutate(cultivar = as.factor(cultivar))
cultivar <- wines$cultivar
wines <- select(wines, -cultivar)
wine_pca <- prcomp(x = wines, center = T, scale = T)
wine_scores <- as.data.frame(wine_pca$x) %>%
mutate(cultivar = cultivar)
ggplot(wine_scores) +
aes(x = PC1, y = PC2, color = cultivar) +
geom_point() +
ggtitle("Groupings based on cultivar")
# cluster wine data in original and PC spaces and plot along first two PCs
k <- 3  # set number of clusters
# k-means using all variables
kmeans_wine <- kmeans(scale(wines),
centers = k)
ggplot(wine_scores) +
aes(x = PC1, y = PC2, color = as.factor(kmeans_wine$cluster)) +
geom_point() +
labs(title = "K-means clustering (k = 3)",
color = "Clusters")
tcga_kmeans <- kmeans(brca_scores[, 1:100], centers = 4)
str(brca_scores)
brca_scores <- irlba(A = X, nv = 100)$u
brca_scores <- irlba(A = as.matrix(X), nv = 100)$u
brca_scores <- prcomp(x = as.matrix(X), center = F, scale = F)$x
brca_scores <- prcomp(x = as.matrix(X), center = F, scale = F)$x[, 1:100]
tcga_kmeans <- kmeans(brca_scores, centers = 4)
ggplot(brca_scores) +
aes(x = PC1, y = PC2, color = as.factor(tcga_kmeans$cluster)) +
geom_point() +
labs(title = "TCGA BRCA K-means clustering (k = 4)",
color = "Clusters")
brca_pca <- prcomp(x = as.matrix(X), center = F, scale = F)
brca_scores <- as.data.frame(brca_pca$x[, 1:100])
tcga_kmeans <- kmeans(brca_scores, centers = 4)
ggplot(brca_scores) +
aes(x = PC1, y = PC2, color = as.factor(tcga_kmeans$cluster)) +
geom_point() +
labs(title = "TCGA BRCA K-means clustering (k = 4)",
color = "Clusters")
dist_mat <- dist(wines)
s <- silhouette(kmeans_wine$cluster, dist_mat)
# average silhouette width
mean(s[, 3])
plot(s)
library(cluster)
dist_mat <- dist(wines)
s <- silhouette(kmeans_wine$cluster, dist_mat)
# average silhouette width
mean(s[, 3])
plot(s)
kmeans10 <- kmeans(wines.pca$x[, 1:2], centers=10)
s <- silhouette(kmeans10$cluster, dist.mat)
# average silhouette width
mean(s[, 3])
plot(s)
kmeans_k6 <- kmeans(scale(kmeans), centers = 6)
kmeans_k6 <- kmeans(scale(wines), centers = 6)
s <- silhouette(kmeans_k6$cluster, dist_mat)
# average silhouette width
mean(s[, 3])
plot(s)
dist_mat <- dist(wines)
s <- silhouette(kmeans_wine$cluster, dist_mat)
# average silhouette width
mean(s[, 3])
plot(s)
str(s)
