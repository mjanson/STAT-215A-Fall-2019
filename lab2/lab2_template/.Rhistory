# watch K-means algorithm movie
# start from random starting points
saveHTML(mv.kmeans(x, 3, cens = NULL), img.name = "km-video-k3")
# now, simulate data from sim2
sim_data <- sim2()
x <- sim_data$x
y <- sim_data$y
# plot true groups
plot(x[, 1], x[, 2], col = as.numeric(y), pch = 16)
# watch K-means algorithm movie
# start from random starting points
saveHTML(mv.kmeans(x, 2, cens = NULL), img.name = "km-video-k2")
# K-means
library(R.utils)
removeDirectory("~/js")
removeDirectory("~/images")
file.remove("~/index.html")
removeDirectory("~/js", recursive = T)
removeDirectory("~/images", recursive = T)
file.remove("~/index.html")
# K-means
library(R.utils)
# simulate data from three clusters with mean mu1, mu2, mu3, and variance Sig
sim1 <- function() {
n <- 300
mu1 <- c(3, 3)
mu2 <- c(7, 4)
mu3 <- c(6, 5.5)
Sig <- matrix(c(1, .5, .5, 1), 2, 2)
x1 <- t(matrix(mu1, 2, n / 3)) + matrix(rnorm(n), n / 3, 2)
xx <- matrix(rnorm(n * 2 / 3), n / 3, 2)
x2 <- t(matrix(mu2, 2, n / 3)) + xx %*% chol(Sig)
xx <- matrix(rnorm(n * 2 / 3), n / 3, 2)
x3 <- t(matrix(mu3, 2, n / 3)) + xx %*% chol(Sig)
x <- rbind(x1, x2, x3)
Y <- c(rep(1, n / 3), rep(2, n / 3), rep(3, n / 3))
y <- factor(Y)
return(list(x = x, y = y))
}
# simulate data from two unequally-sized clusters with mean mu1, mu2, and
# variances Sig1, Sig2
sim2 <- function() {
n1 <- 250
n2 <- 50
mu1 <- c(3, 3)
mu2 <- c(7, 5)
Sig1 <- diag(2)  # var = 1
Sig2 <- diag(2) / 5  # var = .2
x1 <- t(matrix(mu1, 2, n1)) + matrix(rnorm(n1 * 2), n1, 2) %*% chol(Sig1)
x2 <- t(matrix(mu2, 2, n2)) + matrix(rnorm(n2 * 2), n2, 2) %*% chol(Sig2)
x <- rbind(x1, x2)
Y <- c(rep(1, n1), rep(2, n2))
y <- factor(Y)
return(list(x = x, y = y))
}
# code to understand K-means algorithm
require("animation")
mv.kmeans <- function(x, k, cens = NULL) {
n <- nrow(x)
if (is.null(cens)) {
cens <- x[sample(1:n, k), ]
}
plot(x[, 1], x[, 2], pch = 16)
points(cens[, 1], cens[, 2], col = 1:k, pch = 16, cex = 3)
thr <- 1e-6
ind <- 1
iter <- 1
while (ind > thr) {
oldcen <- cens
km <- kmeans(x, centers = cens, iter.max = 1, nstart = 1, algorithm = "MacQueen")
plot(x[, 1], x[, 2], col = km$cluster, pch = 16)
points(cens[, 1], cens[, 2], col = 1:k, pch = 16, cex = 3)
cens <- km$centers
# print(cens)
plot(x[, 1], x[, 2], col = km$cluster, pch = 16)
points(cens[, 1], cens[, 2], col = 1:k, pch = 16, cex = 3)
ind <- sum(diag((oldcen - cens) %*% t(oldcen - cens)))
# print(ind)
}
}
# simulate data from sim1
sim_data <- sim1()
x <- sim_data$x
y <- sim_data$y
# plot true groups
plot(x[, 1], x[, 2], col = as.numeric(y), pch = 16)
# watch K-means algorithm movie
# start from random starting points
saveHTML(mv.kmeans(x, 3, cens = NULL), img.name = "km-video-k3")
saveHTML(mv.kmeans(x, 3, cens = NULL), img.name = "km-video-k3")
removeDirectory("~/js", recursive = T)
removeDirectory("~/images", recursive = T)
file.remove("~/index.html")
# now, simulate data from sim2
sim_data <- sim2()
x <- sim_data$x
y <- sim_data$y
# plot true groups
plot(x[, 1], x[, 2], col = as.numeric(y), pch = 16)
# watch K-means algorithm movie
# start from random starting points
saveHTML(mv.kmeans(x, 2, cens = NULL), img.name = "km-video-k2")
# K-means
library(R.utils)
# simulate data from three clusters with mean mu1, mu2, mu3, and variance Sig
sim1 <- function() {
n <- 300
mu1 <- c(3, 3)
mu2 <- c(7, 4)
mu3 <- c(6, 5.5)
Sig <- matrix(c(1, .5, .5, 1), 2, 2)
x1 <- t(matrix(mu1, 2, n / 3)) + matrix(rnorm(n), n / 3, 2)
xx <- matrix(rnorm(n * 2 / 3), n / 3, 2)
x2 <- t(matrix(mu2, 2, n / 3)) + xx %*% chol(Sig)
xx <- matrix(rnorm(n * 2 / 3), n / 3, 2)
x3 <- t(matrix(mu3, 2, n / 3)) + xx %*% chol(Sig)
x <- rbind(x1, x2, x3)
Y <- c(rep(1, n / 3), rep(2, n / 3), rep(3, n / 3))
y <- factor(Y)
return(list(x = x, y = y))
}
# simulate data from two unequally-sized clusters with mean mu1, mu2, and
# variances Sig1, Sig2
sim2 <- function() {
n1 <- 250
n2 <- 50
mu1 <- c(3, 3)
mu2 <- c(6, 5)
Sig1 <- diag(2)  # var = 1
Sig2 <- diag(2) / 10  # var = .1
x1 <- t(matrix(mu1, 2, n1)) + matrix(rnorm(n1 * 2), n1, 2) %*% chol(Sig1)
x2 <- t(matrix(mu2, 2, n2)) + matrix(rnorm(n2 * 2), n2, 2) %*% chol(Sig2)
x <- rbind(x1, x2)
Y <- c(rep(1, n1), rep(2, n2))
y <- factor(Y)
return(list(x = x, y = y))
}
# code to understand K-means algorithm
require("animation")
mv.kmeans <- function(x, k, cens = NULL) {
n <- nrow(x)
if (is.null(cens)) {
cens <- x[sample(1:n, k), ]
}
plot(x[, 1], x[, 2], pch = 16)
points(cens[, 1], cens[, 2], col = 1:k, pch = 16, cex = 3)
thr <- 1e-6
ind <- 1
iter <- 1
while (ind > thr) {
oldcen <- cens
km <- kmeans(x, centers = cens, iter.max = 1, nstart = 1, algorithm = "MacQueen")
plot(x[, 1], x[, 2], col = km$cluster, pch = 16)
points(cens[, 1], cens[, 2], col = 1:k, pch = 16, cex = 3)
cens <- km$centers
# print(cens)
plot(x[, 1], x[, 2], col = km$cluster, pch = 16)
points(cens[, 1], cens[, 2], col = 1:k, pch = 16, cex = 3)
ind <- sum(diag((oldcen - cens) %*% t(oldcen - cens)))
# print(ind)
}
}
# now, simulate data from sim2
sim_data <- sim2()
x <- sim_data$x
y <- sim_data$y
# plot true groups
plot(x[, 1], x[, 2], col = as.numeric(y), pch = 16)
# watch K-means algorithm movie
# start from random starting points
saveHTML(mv.kmeans(x, 2, cens = NULL), img.name = "km-video-k2")
removeDirectory("~/js", recursive = T)
removeDirectory("~/images", recursive = T)
file.remove("~/index.html")
# now, simulate data from sim2
sim_data <- sim2()
x <- sim_data$x
y <- sim_data$y
# plot true groups
plot(x[, 1], x[, 2], col = as.numeric(y), pch = 16)
# watch K-means algorithm movie
# start from random starting points
saveHTML(mv.kmeans(x, 2, cens = NULL), img.name = "km-video-k2")
library(maps)
library(ggplot2)
library(dplyr)
# load the data
ling_data <- read.table('data/lingData.txt', header = T)
ling_location <- read.table('data/lingLocation.txt', header = T)
# question_data contains three objects: quest.mat, quest.use, all.ans
load("data/question_data.RData")
setwd("~/My Documents/Grad School/Year 2 Fall/Applied Statistics - GSI/stat-215a-fall-2019/labs/lab2/lab2_template")
library(maps)
library(ggplot2)
library(dplyr)
# load the data
ling_data <- read.table('data/lingData.txt', header = T)
str(ling_data)
ling_location <- read.table('data/lingLocation.txt', header = T)
str(ling_location)
# question_data contains three objects: quest.mat, quest.use, all.ans
load("data/question_data.RData")
# load the data
ling.data <- read.table('data/lingData.txt', header = T)
ling.location <- read.table('data/lingLocation.txt', header = T)
# question_data contains three objects: quest.mat, quest.use, all.ans
load("data/question_data.RData")
View(quest.mat)
View(quest.use)
str(all.ans)
# ling_data has a column for each question, and ling_location has a column
# for each question x answer.  Sorry the columns in ling_location are not usefully named,
# but it's not too tricky to figure out which is which.
# Note that you still need to clean this data (check for NA's, missing location data, etc.)
names(ling_data)
names(ling_location)
state_df <- map_data("state")
blank_theme <- theme_bw() +
theme(plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank())
############
# Make a plot for the second person plural answers.
# You may want to join these data sets more efficiently than this.
plural_second_person <- ling_data %>%
filter(Q050 %in% c(1, 2, 9), long > -125)
# extract the answers to question 50
answers_q50 <- all.ans[['50']]
# Make the column to join on.  They must be the same type.
answers_q50$Q050 <- rownames(answers_q50)
plural_second_person$Q050 <- as.character(plural_second_person$Q050)
plural_second_person <- inner_join(plural_second_person, answers_q50, by = "Q050")
# Plot!
ggplot(plural_second_person) +
geom_point(aes(x = long, y = lat, color = ans),
size = 3, alpha = 0.5) +
geom_polygon(aes(x = long, y = lat, group = group),
data = state_df, colour = "black", fill = NA) +
blank_theme
# Plot!
ggplot(plural_second_person) +
geom_point(aes(x = long, y = lat, color = ans),
size = 3, alpha = 0.5) +
geom_polygon(aes(x = long, y = lat, group = group),
data = state_df, colour = "black", fill = NA) +
theme_void()
my_map_theme <- theme_void()
# Plot!
ggplot(plural_second_person) +
geom_point(aes(x = long, y = lat, color = ans),
size = 3, alpha = 0.5) +
geom_polygon(aes(x = long, y = lat, group = group),
data = state_df, colour = "black", fill = NA) +
my_map_theme()
# Plot!
ggplot(plural_second_person) +
geom_point(aes(x = long, y = lat, color = ans),
size = 3, alpha = 0.5) +
geom_polygon(aes(x = long, y = lat, group = group),
data = state_df, colour = "black", fill = NA) +
my_map_theme
###############
# Plot the ling_location data (which lives on a grid).
# Note that this doesn't look great with
# state outlines. You can probably do better!
ling_location %>%
filter(Longitude > -125) %>%
ggplot() +
geom_tile(aes(x = Longitude, y = Latitude,
color = log10(V12), fill = log10(V12))) +
geom_polygon(aes(x = long, y = lat, group = group),
data = state_df, colour = "gray", fill = NA) +
my_map_theme
# setting default knitr options
knitr::opts_chunk$set(
echo = FALSE,
warning = FALSE,
message = FALSE,
fig.out = "100%",
fig.align = "center",
fig.pos = "H",
cache = FALSE)
# load useful libraries
library(tidyverse)
library(R.utils)
library(GGally)
library(irlba)
library(ggpubr)
library(cluster)
library(dendextend)
# source all files in the R/ directory
sourceDirectory("./R/", modifiedOnly = F, recursive = F) # useful functions
# load the wines dataset
wines_orig <- read.csv("./data/wines.csv")
# clean wines dataset
wines <- wines_orig %>%
setNames(c("cultivar", "alcohol", "malic acid", "ash",
"alcalinity of ash", "magnesium", "total phenols",
"flavanoids", "nonflavanoid phenols",
"proanthocyanins", "color intensity", "hue",
"OD280/OD315 of diluted wines", "proline")) %>%
mutate(cultivar = as.factor(cultivar))
cultivar <- wines$cultivar
wines <- select(wines, -cultivar)
str(wines)
summary(wines)
wine_pca <- prcomp(x = wines, center = T, scale = T)
wine_scores <- as.data.frame(wine_pca$x) %>%
mutate(cultivar = cultivar)
ggplot(wine_scores) +
aes(x = PC1, y = PC2, color = cultivar) +
geom_point() +
ggtitle("Groupings based on cultivar")
wine_pca <- prcomp(x = wines, center = F, scale = T)
wine_scores <- as.data.frame(wine_pca$x) %>%
mutate(cultivar = cultivar)
ggplot(wine_scores) +
aes(x = PC1, y = PC2, color = cultivar) +
geom_point() +
ggtitle("Groupings based on cultivar")
wine_pca <- prcomp(x = wines, center = T, scale = F)
wine_scores <- as.data.frame(wine_pca$x) %>%
mutate(cultivar = cultivar)
ggplot(wine_scores) +
aes(x = PC1, y = PC2, color = cultivar) +
geom_point() +
ggtitle("Groupings based on cultivar")
wine_pca <- prcomp(x = wines, center = F, scale = T)
wine_scores <- as.data.frame(wine_pca$x) %>%
mutate(cultivar = cultivar)
ggplot(wine_scores) +
aes(x = PC1, y = PC2, color = cultivar) +
geom_point() +
ggtitle("Groupings based on cultivar")
wine_pca <- prcomp(x = wines, center = T, scale = T)
wine_scores <- as.data.frame(wine_pca$x) %>%
mutate(cultivar = cultivar)
ggplot(wine_scores) +
aes(x = PC1, y = PC2, color = cultivar) +
geom_point() +
ggtitle("Groupings based on cultivar")
str(wines)
load("./data/tcga_brca.Rdata")
? nmf
?? nmf
library(NMF)
str(wines)
? nmf
nmf_out <- nmf(wines, rank = 4)
str(nmf_out)
# setting default knitr options
knitr::opts_chunk$set(
echo = FALSE,
warning = FALSE,
message = FALSE,
fig.out = "100%",
fig.align = "center",
fig.pos = "H",
cache = FALSE)
# load useful libraries
library(tidyverse)
library(R.utils)
library(GGally)
library(irlba)
library(ggpubr)
library(cluster)
library(dendextend)
library(NMF)
W <- mynmf@fit@W
W <- nmf_out@fit@W
H <- nmf_out@fit@H
str(W)
str(wines)
str(cultivar)
par(mfrow = c(1,2))
basismap(nmf_out, Rowv = NA, main = "W Matrix",
annRow = list(Cultivar = cultivar))
coefmap(nmf_out, main = "H Matrix", Colv = FALSE,
annLegend = FALSE, legend = FALSE)
nmf_out <- nmf(wines, rank = 3)
W <- nmf_out@fit@W
H <- nmf_out@fit@H
par(mfrow = c(1,2))
basismap(nmf_out, Rowv = NA, main = "W Matrix",
annRow = list(Cultivar = cultivar))
coefmap(nmf_out, main = "H Matrix", Colv = FALSE,
annLegend = FALSE, legend = FALSE)
nmf_out <- nmf(scale(wines, center = F, scale = T), rank = 3)
W <- nmf_out@fit@W
H <- nmf_out@fit@H
par(mfrow = c(1,2))
basismap(nmf_out, Rowv = NA, main = "W Matrix",
annRow = list(Cultivar = cultivar))
coefmap(nmf_out, main = "H Matrix", Colv = FALSE,
annLegend = FALSE, legend = FALSE)
ggarrange(plt1, plt2)
plt1 <- ggplot(brca_scores) +
aes(x = PC1, y = PC2, color = as.factor(tcga_kmeans$cluster)) +
geom_point() +
labs(title = "TCGA BRCA K-means clustering (k = 4)",
color = "Clusters")
plt2 <- ggplot(brca_scores) +
aes(x = PC1, y = PC2, color = as.factor(Y$BRCA_Subtype_PAM50)) +
geom_point() +
labs(title = "TCGA BRCA PC Plot",
color = "True Subtypes")
ggarrange(plt1, plt2)
load("./data/tcga_brca.Rdata")  # -> X and Y
brca_pca <- prcomp(x = as.matrix(X), center = F, scale = F)
brca_scores <- as.data.frame(brca_pca$x[, 1:100])
tcga_kmeans <- kmeans(brca_scores, centers = 4)
plt1 <- ggplot(brca_scores) +
aes(x = PC1, y = PC2, color = as.factor(tcga_kmeans$cluster)) +
geom_point() +
labs(title = "TCGA BRCA K-means clustering (k = 4)",
color = "Clusters")
plt2 <- ggplot(brca_scores) +
aes(x = PC1, y = PC2, color = as.factor(Y$BRCA_Subtype_PAM50)) +
geom_point() +
labs(title = "TCGA BRCA PC Plot",
color = "True Subtypes")
ggarrange(plt1, plt2)
setwd("~/My Documents/Grad School/Year 2 Fall/Applied Statistics - GSI/stat-215a-fall-2019/sections/week5/lab_week5")
load("./data/tcga_brca.Rdata")  # -> X and Y
brca_pca <- prcomp(x = as.matrix(X), center = F, scale = F)
brca_scores <- as.data.frame(brca_pca$x[, 1:100])
tcga_kmeans <- kmeans(brca_scores, centers = 4)
plt1 <- ggplot(brca_scores) +
aes(x = PC1, y = PC2, color = as.factor(tcga_kmeans$cluster)) +
geom_point() +
labs(title = "TCGA BRCA K-means clustering (k = 4)",
color = "Clusters")
plt2 <- ggplot(brca_scores) +
aes(x = PC1, y = PC2, color = as.factor(Y$BRCA_Subtype_PAM50)) +
geom_point() +
labs(title = "TCGA BRCA PC Plot",
color = "True Subtypes")
ggarrange(plt1, plt2)
# setting default knitr options
knitr::opts_chunk$set(
echo = FALSE,
warning = FALSE,
message = FALSE,
fig.out = "100%",
fig.align = "center",
fig.pos = "H",
cache = FALSE)
# load useful libraries
library(tidyverse)
library(R.utils)
library(GGally)
library(irlba)
library(ggpubr)
library(cluster)
library(dendextend)
library(NMF)
plt1 <- ggplot(brca_scores) +
aes(x = PC1, y = PC2, color = as.factor(tcga_kmeans$cluster)) +
geom_point() +
labs(title = "TCGA BRCA K-means clustering (k = 4)",
color = "Clusters")
plt2 <- ggplot(brca_scores) +
aes(x = PC1, y = PC2, color = as.factor(Y$BRCA_Subtype_PAM50)) +
geom_point() +
labs(title = "TCGA BRCA PC Plot",
color = "True Subtypes")
ggarrange(plt1, plt2)
setwd("~/My Documents/Grad School/Year 2 Fall/Applied Statistics - GSI/stat-215a-fall-2019/labs/lab2/lab2_template")
# load the data
ling.data <- read.table('data/lingData.txt', header = T)
ling.location <- read.table('data/lingLocation.txt', header = T)
head(ling.data)
head(ling.location)
str(redwood_log_orig)
# load in useful packages
library(tidyverse)
library(forcats)
library(lubridate)
library(stringr)
library(corrplot)
# set default knitr chunks
knitr::opts_chunk$set(
echo = FALSE,
fig.align = "center",
fig.height = 4,
fig.pos = "H",
fig.width = 6,
message = FALSE,
warning = FALSE,
cache = FALSE
)
# don't cache results
# load in the loadData() functions
source("R/load.R")
# load in the cleanData() functions
source("R/clean.R")
# note that the cache = TRUE chunk argument means that the results of this
# chunk are saved so it doesn't need to be re-run every time you compile the pdf
# load the dates data
dates_orig <- loadDatesData(path = "data/")
# clean the dates data
dates <- cleanDatesData(dates_orig)
# load the redwood sensor data
redwood_all_orig <- loadRedwoodData(path = "data/", source = "all")
redwood_net_orig <- loadRedwoodData(path = "data/", source = "net")
redwood_log_orig <- loadRedwoodData(path = "data/", source = "log")
# load the mote location data
mote_location <- loadMoteLocationData()
# clean the redwood sensor data
str(redwood_log_orig)
View(redwood_log_orig)
