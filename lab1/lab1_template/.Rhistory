A
A %>% select(x)
A %>% map(~.x)
temp <- tempfile()
temp
cyls <- split(mtcars, mtcars$cyl)
file.path(temp, paste0("cyl-", names(cyls), ".csv"))
? file.path
params <- tibble::tribble(
~ n, ~ min, ~ max,
1L,     0,     1,
2L,    10,   100,
3L,   100,  1000
)
params
params <- tibble::tribble( # create tibble row by row
~ n, ~ min, ~ max,
1L,     0,     1,
2L,    10,   100,
3L,   100,  1000
)
pmap(params, runif)
? map
## ex. box-cox transformation viz
boxcox2 <- function(lambda) {
if (lambda == 0) {
function(x) log(x)
} else {
function(x) (x ^ lambda - 1) / lambda
}
}
stat_boxcox <- function(lambda) {
stat_function(aes(colour = lambda), fun = boxcox2(lambda), size = 1)
}
lapply(c(0.5, 1, 1.5), stat_boxcox)
ggplot(data.frame(x = c(0, 5)), aes(x)) +
lapply(c(0.5, 1, 1.5), stat_boxcox) +
scale_colour_viridis_c(limits = c(0, 1.5))
ggplot(data.frame(x = c(0, 5))) +
aes(x = x) +
lapply(c(0.5, 1, 1.5), stat_boxcox) +
scale_colour_viridis_c(limits = c(0, 1.5))
## ex. catching errors via purr::safely()
x <- list(
c(0.512, 0.165, 0.717),
c(0.064, 0.781, 0.427),
c(0.890, 0.785, 0.495),
"oops"
)
map_dbl(x, sum)
out <- map(x, safely(sum))
str(out)
# to transpose list via "inside-out"
out <- transpose(map(x, safely(sum)))
str(out)
? transpose
ll <- list(
list(x = 1, y = "one"),
list(z = "deux", x = 2)
)
ll %>% transpose()
urls <- c(
"adv-r" = "https://adv-r.hadley.nz",
"r4ds" = "http://r4ds.had.co.nz/"
# and many many more
)
urls
getwd()
path <- paste(names(urls), ".html")
walk2(urls, path, download.file, quiet = TRUE)
################################################################################
#### Chapter 12: Object-Oriented Programming ###################################
################################################################################
sloop::otype(1:10)
install.packages("sloop")
################################################################################
#### Chapter 12: Object-Oriented Programming ###################################
################################################################################
sloop::otype(1:10)
################################################################################
#### Chapter 12: Object-Oriented Programming ###################################
################################################################################
sloop::otype(1:10)
class(mtcars)
## Technically, the difference between base and OO objects is that OO objects have a “class” attribute:
class(1:10)
? class
## Technically, the difference between base and OO objects is that OO objects have a “class” attribute:
attr(1:10, "class")
attr(mtcars, "class")
# use s3_class instead of class
class(1:10)
sloop::s3_class(1:10)
typeof(mtcars)
## s3 functions: "generic"
sloop::ftype(print)
## s3 functions: "generic"
ftype(print)
## s3 functions: "generic"
sloop::ftype(print)
## s3 functions: "generic"
sloop::ftype(str)
? match.arg
units <- "sec"
units <- match.arg(units, c("secs", "mins", "hours", "days", "weeks"))
units
units <- "mins"
units <- match.arg(units, c("secs", "mins", "hours", "days", "weeks"))
units
units <- ""
units <- match.arg(units, c("secs", "mins", "hours", "days", "weeks"))
? match
## bang-bang !! or the unquote operator
xx <- expr(x + x)
yy <- expr(y + y)
expr(!!xx / !!yy)
#> (x + x)/(y + y)
expr(xx / yy)
## to evaluate an expression
eval(expr(x + y), env(x = 1, y = 10))
## to evaluate an expression
rlang::eval(expr(x + y), env(x = 1, y = 10))
#> [1] 11
eval(expr(x + y), env(x = 2, y = 100))
## to evaluate an expression
eval(expr(x + y), rlang::env(x = 1, y = 10))
#> [1] 11
eval(expr(x + y), rlang::env(x = 2, y = 100))
eval(expr(x + y))
#> [1] 102
x <- 2; y <- 100
eval(expr(x + y))
lobstr::ast(f(x, "y", 1))
install.packages("lobstr")
lobstr::ast(f(x, "y", 1))
x <- expr(read.table("important.csv", row.names = FALSE))
str(x)
x
x[1]
x[[1]]
x[[2]]
x[[3]]
x[[4]]
length(x)
x[1]
x[2]
x[3]
str(x)
x
x[[1]]
x[[2]]
x[1]
## can subset expressions
x <- expr(read.table("important.csv", row.names = FALSE))
x[[1]]
x[[2]]
x[[3]]
names(x)
# use call_standardize to standardize arguments names
rlang::call_standardise(x)
x
# use call_standardize to standardize arguments names
x <- rlang::call_standardise(x)
x
names(x)
# can modify arguments like lists
x$header <- TRUE
x
? "&&"
c(1, 2) && c(1, 3)
c(1, 2) && c(2, 3)
c(TRUE, FALSE) && c(FALSE, TRUE)
c(TRUE, TRUE) && c(FALSE, TRUE)
c(TRUE, TRUE) && c(TRUE, TRUE)
c(TRUE, TRUE) & c(TRUE, TRUE)
c(TRUE, TRUE) & c(TRUE, FALSE)
## quotation
cement <- function(...) {
args <- ensyms(...)
paste(purrr::map(args, as_string), collapse = " ")
}
cement(Good, morning, Hadley)
################################################################################
#### Chapter 18: Quasiquotation ################################################
################################################################################
library(rlang)
library(purr)
library(purrr)
## quotation
cement <- function(...) {
args <- ensyms(...)
paste(purrr::map(args, as_string), collapse = " ")
}
cement(Good, morning, Hadley)
#> [1] "Good morning Hadley"
cement(Good, afternoon, Alice)
#> [1] "Good afternoon Alice"
# but if we use variables...
name <- "Hadley"
time <- "morning"
cement(Good, time, name)
x <- expr(-1)
expr(f(!!x, y))
x <- -1
expr(f(!!x, y))
#> f(-1, y)
# can also work with symbols
a <- sym("y")
b <- 1
expr(f(!!a, !!b))
#> f(-1, y)
# can also work with symbols
a <- "y"
b <- 1
expr(f(!!a, !!b))
#> f(-1, y)
# can also work with symbols
a <- sym("y")  # different from "y"
b <- 1
#> f(y, 1)
expr(f(a, !!b))
#> f(y, 1)
expr(f(sym("y"), !!b))
#> f(y, 1)
expr(f(!!sym("y"), !!b))
## unquoting with "$"
x <- expr(x)
expr(`$`(df, !!x))
## unquoting with many arguments
xs <- exprs(1, a, -b)
expr(f(!!!xs, y))
#> f(1, a, -b, y)
# Or with names
ys <- set_names(xs, c("a", "b", "c"))
expr(f(!!!ys, d = 4))
## application: rowbinding multiple data.frames in a list
dfs <- list(
a = data.frame(x = 1, y = 2),
b = data.frame(x = 3, y = 4)
)
dplyr::bind_rows(!!!dfs)
## application: supply name indirectly
var <- "x"
val <- c(4, 3, 9)
tibble::tibble(!!var := val)
tibble::tibble(!!var := !!val)
tibble::tibble((!!var) := val)
tibble::tibble(!!var = val)
? tibble
? list2
## if function doesn't have tidy dots, use exec()
# Directly
exec("mean", x = 1:10, na.rm = TRUE, trim = 0.1)
#> [1] 5.5
# Indirectly
args <- list(x = 1:10, na.rm = TRUE, trim = 0.1)
#> [1] 5.5
# to run multiple functions with the same arguments
x <- c(runif(10), NA)
x
funs <- c("mean", "median", "sd")
? eval_tidy
? dump.frames
library(devtools)
devtools::install_github("sumbose/iRF")
library(devtools)
install_github(karlkumbier/iRF2.0)
install_github("karlkumbier/iRF2.0")
install_github("karlkumbier/iRF")
? iRF
library(iRF)
? iRF
library(iRF)
? iRF
remove.packages("package:iRF")
remove.packages("iRF")
library(iRF)
? iRF
remove.packages("iRF")
? iRF
library(iRF)
library(iRF)
? iRF
detach(name = "package:iRF", unload = T)
remove.packages(pkgs = "iRF")
library(tidyverse)
library(iRF)
set.seed(1)
X <- iris %>% select(-Species)
Y <- iris$Species
rit.params <- list(depth=5, nchild=2, ntree=500, class.id=1, class.cut=NULL)
# specifying both mtry.select.prob and mtry arguments (ranger)
irf.fit <- iRF(x = X,
y = Y,
ntree = 500,
n.iter = 5,
iter.return = 1:5,
int.return = 1:5,
rit.param = rit.params,
n.core = 1,
n.bootstrap = 30,
signed = FALSE,
type = "ranger",
mtry.select.prob = rep(1, ncol(X)),
mtry = 3)
install.packages("ranger")
install.packages("ranger")
# specifying both mtry.select.prob and mtry arguments (ranger)
irf.fit <- iRF(x = X,
y = Y,
ntree = 500,
n.iter = 5,
iter.return = 1:5,
int.return = 1:5,
rit.param = rit.params,
n.core = 1,
n.bootstrap = 30,
signed = FALSE,
type = "ranger",
mtry.select.prob = rep(1, ncol(X)),
mtry = 3)
library(tidyverse)
library(iRF)
set.seed(1)
X <- iris %>% select(-Species)
Y <- iris$Species
rit.params <- list(depth=5, nchild=2, ntree=500, class.id=1, class.cut=NULL)
# specifying both mtry.select.prob and mtry arguments (ranger)
irf.fit <- iRF(x = X,
y = Y,
ntree = 500,
n.iter = 5,
iter.return = 1:5,
int.return = 1:5,
rit.param = rit.params,
n.core = 1,
n.bootstrap = 30,
signed = FALSE,
type = "ranger",
mtry.select.prob = rep(1, ncol(X)),
mtry = 3)
ncol(X)
# specifying both mtry.select.prob and mtry arguments (ranger)
irf.fit <- iRF(x = X,
y = Y,
ntree = 500,
n.iter = 5,
iter.return = 1:5,
int.return = 1:5,
rit.param = rit.params,
n.core = 1,
n.bootstrap = 30,
signed = FALSE,
type = "ranger",
mtry.select.prob = rep(1, 4),
mtry = 3)
# specifying both mtry.select.prob and mtry arguments (ranger)
irf.fit <- iRF(x = X,
y = Y,
ntree = 500,
n.iter = 5,
iter.return = 1:5,
int.return = 1:5,
rit.param = rit.params,
n.core = 1,
n.bootstrap = 30,
signed = FALSE,
type = "ranger",
mtry.select.prob = rep(1, ncol(X)),
mtry = 1)
tryCatch(
error = function(cnd) 10,
1 + 1
)
tmp <- tryCatch(
error = function(cnd) 10,
1 + 1
)
tmp
tmp <- tryCatch(
error = function(cnd) 10,
stop("Tmp")
)
tmp
tmp <- tryCatch(
error = function(cnd) "Error",
stop("Tmp")
)
tmp
library(shiny); runApp('Downloads/Untitled.R')
?? sourceDirectory
? source
? apply
X <- matrix(1:10, nrow = 5)
X.df <- as.data.frame(X)
apply(X.df, 2, FUN = mean)
apply(X, 2, FUN = mean)
str(apply(X.df, 2, FUN = mean))
str(apply(X, 2, FUN = mean))
str(apply(X.df, 2, FUN = function(X) return(X)))
str(apply(X, 2, FUN = function(X) return(X)))
removeZeroVarCols <- function(dat) {
## removeZeroVarCols: function to clean data by removing columns with
##    zero variance
##
## Input: dat = data matrix or data frame
##
## Output: newdat = data matrix without the constant columns
##
## Usage: removeZeroVarCols(dat = cbind(1:5, rep(1, 5)))
zero.vars <- apply(X = dat, MARGIN = 2, FUN = var, na.rm = T) == 0
newdat <- dat[, !zero.vars]
return(newdat)
}
removeZeroVarCols(dat = cbind(1:5, rep(1, 5)))
library(tidyverse)
removeZeroVarCols <- function(dat) {
## removeZeroVarCols: function to clean data by removing columns with
##    zero variance
##
## Input: dat = data matrix or data frame
##
## Output: newdat = data matrix without the constant columns
##
## Usage: removeZeroVarCols(dat = cbind(1:5, rep(1, 5)))
zero.vars <- which(apply(X = dat, MARGIN = 2, FUN = var, na.rm = T) == 0)
newdat <- dat %>%
select(-zero.vars)
return(newdat)
}
removeZeroVarCols(dat = cbind(1:5, rep(1, 5)))
library(tidyverse)
removeZeroVarCols <- function(dat) {
## removeZeroVarCols: function to clean data by removing columns with
##    zero variance
##
## Input: dat = data matrix or data frame
##
## Output: newdat = data matrix without the constant columns
##
## Usage: removeZeroVarCols(dat = cbind(1:5, rep(1, 5)))
zero.vars <- which(apply(X = dat, MARGIN = 2, FUN = var, na.rm = T) == 0)
newdat <- dat %>%
select(list(-zero.vars))
return(newdat)
}
removeZeroVarCols(dat = cbind(1:5, rep(1, 5)))
dat <- cbind(1:5, rep(1, 5))
dat
library(tidyverse)
removeZeroVarCols <- function(dat) {
## removeZeroVarCols: function to clean data by removing columns with
##    zero variance
##
## Input: dat = data matrix or data frame
##
## Output: newdat = data matrix without the constant columns
##
## Usage: removeZeroVarCols(dat = cbind(1:5, rep(1, 5)))
zero.vars <- which(apply(X = dat, MARGIN = 2, FUN = var, na.rm = T) == 0)
newdat <- dat %>%
as.data.frame() %>%
select(-zero.vars)
return(newdat)
}
removeZeroVarCols(dat = cbind(1:5, rep(1, 5)))
library(tidyverse)
removeZeroVarCols <- function(data) {
## removeZeroVarCols: function to clean data by removing columns with
##    zero variance
##
## Input: data = data matrix or data frame
##
## Output: data_cleaned = data matrix without the constant columns
##
## Usage: removeZeroVarCols(data = cbind(1:5, rep(1, 5)))
zero_vars <- which(apply(X = dat, MARGIN = 2, FUN = var, na.rm = T) == 0)
data_cleaned <- data %>%
as.data.frame() %>%
select(-zero_vars)
return(data_cleaned)
}
removeZeroVarCols(data = cbind(1:5, rep(1, 5)))
setwd("~/My Documents/Grad School/Year 2 Fall/Applied Statistics - GSI/stat-215a-fall-2019/labs/lab1/lab1_template")
# load in useful packages
library(tidyverse)
library(forcats)
library(lubridate)
library(stringr)
# set default knitr chunks
knitr::opts_chunk$set(
echo = FALSE,  # don't print the code chunk
warning = FALSE,  # don't print warnings
message = FALSE,  # don't print messages
fig.width = 6,  # set default width of figures
fig.height = 4,  # set default height of figures
fig.align = "center",  # always align figure in center
fig.pos = "H",  # always plot figure at the exact location of the code chunk
cache = FALSE)  # don't cache results
# load in the loadData() functions
source("R/load.R")
# load in the cleanData() functions
source("R/clean.R")
# load the dates data
dates_orig <- loadDatesData(path = "data/")
# clean the dates data
dates <- cleanDatesData(dates_orig)
# load the redwood sensor data
redwood_all_orig <- loadRedwoodData(path = "data/", source = "all")
redwood_net_orig <- loadRedwoodData(path = "data/", source = "net")
redwood_log_orig <- loadRedwoodData(path = "data/", source = "log")
# clean the redwood sensor data
