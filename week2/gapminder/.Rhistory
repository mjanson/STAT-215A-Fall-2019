# add a scatter layer
geom_point(aes(x = gdp_per_cap, y = life_exp, size = population,
col = continent), alpha = 0.6) +
# label the outlying data points
geom_text(aes(x = gdp_per_cap + 500, y = life_exp, label = country),
hjust = 0,
size = 2,
data = filter(gapminder,
gdp_per_cap > 9000, life_exp < 60, year == 2007)) +
# add a nice theme
theme_nice +
scale_x_log10() +
xlab("GDP per capita (log10)") +
ylab("Life expectancy") +
ggtitle("Life expectancy versus GDP for 2007")
gapminder07 <- gapminder %>%
filter(year == 2007)
gapminder %>%
# remove Oceania
filter(continent != "Oceania") %>%
# input data frame into ggplot base function
ggplot() +
# add a boxplot layer grouped by year
geom_boxplot(aes(x = year, y = life_exp, group = year), fill = "grey90") +
# add a nice theme
theme_nice +
xlab("Year") +
ylab("Life expectancy") +
ggtitle("Life expectancy over time") +
# make a separate plot for each continent
facet_wrap(~continent)
gapminder %>%
# remove Oceania
filter(continent != "Oceania") %>%
# input data frame into ggplot base function
ggplot() +
# add a boxplot layer grouped by year
geom_boxplot(aes(x = year, y = life_exp, group = year), fill = "grey90") +
# add a nice theme
theme_nice +
xlab("Year") +
ylab("Life expectancy") +
ggtitle("Life expectancy over time") +
# make a separate plot for each continent
facet_wrap(~continent)
gapminder %>%
# remove Oceania
filter(continent != "Oceania") %>%
# input data frame into ggplot base function
ggplot() +
# add a boxplot layer grouped by year
geom_boxplot(aes(x = year, y = life_exp), fill = "grey90") +
# add a nice theme
theme_nice +
xlab("Year") +
ylab("Life expectancy") +
ggtitle("Life expectancy over time") +
# make a separate plot for each continent
facet_wrap(~continent)
str(gapminder)
# setting default knitr options (this will save you typing; this way, you no longer have to set echo = FALSE in the header of every code chunk to avoid printing the code)
knitr::opts_chunk$set(
echo = FALSE,  # don't print the code chunk
warning = FALSE,  # don't print warnings
message = FALSE,  # don't print messages
fig.width = 6,  # set default width of figures
fig.height = 4,  # set default height of figures
fig.align = "center",  # always align figure in center
fig.pos = "H",  # always plot figure at the exact location of the code chunk
cache = FALSE)  # setting cache = TRUE will save the output of the evaluated code chunk locally so that when you knit the file in the future, Rmd does not re-evaluate the code chunk if the code chunk has not changed from the previous knit. This can save time (particularly if your code is computationally expensive), but this may lead to obscure errors - e.g., if you update an external file such as load.R, then Rmd may not recognize that clean.R has changed and will not update clean.R. This caveat should not deter you from setting cache = T. It is just good to keep in mind (and for debugging)
# load useful libraries
library(tidyverse)
library(knitr)
library(R.utils)
gapminder %>%
# remove Oceania
filter(continent != "Oceania") %>%
# input data frame into ggplot base function
ggplot() +
# add a boxplot layer grouped by year
geom_boxplot(aes(x = as.factor(year), y = life_exp), fill = "grey90") +
# add a nice theme
theme_nice +
xlab("Year") +
ylab("Life expectancy") +
ggtitle("Life expectancy over time") +
# make a separate plot for each continent
facet_wrap(~continent)
gapminder %>%
# remove Oceania
filter(continent != "Oceania") %>%
# input data frame into ggplot base function
ggplot() +
# add a boxplot layer grouped by year
geom_boxplot(aes(x = as.factor(year), y = life_exp), fill = "grey90") +
# add a nice theme
theme_nice +
xlab("Year") +
ylab("Life expectancy") +
ggtitle("Life expectancy over time") +
# make a separate plot for each continent
facet_wrap(~continent)
gapminder %>%
# remove Oceania
filter(continent != "Oceania") %>%
# input data frame into ggplot base function
ggplot() +
# make a separate plot for each continent
facet_wrap(~continent) +
# add a boxplot layer grouped by year
geom_boxplot(aes(x = year, y = life_exp, group = year), fill = "grey90") +
# add a nice theme
theme_nice +
xlab("Year") +
ylab("Life expectancy") +
ggtitle("Life expectancy over time")
str(gapminder)
tapply(X = gapminder$gdp_per_cap,
INDEX = gapminder$continent,
FUN = mean)
tapply(X = gapminder$gdp_per_cap,
INDEX = gapminder$continent,
FUN = var)
gapminder %>%
group_by(continent) %>%
summarise(mean = mean,
var = var)
gapminder %>%
group_by(continent) %>%
summarise(mean = mean(gdp_per_cap),
var = var(gdp_per_cap))
? kable_styling
library(kableExtra)
? kable_styling
? kable
kable(gdp_stats,
booktabs = T, linesep = "", format = "latex",
caption = "We show the mean GDP per capita for various continents along with its variance.") %>%
kable_styling(latex_options = c("hold_position", "striped"))
# setting default knitr options (this will save you typing; this way, you no longer have to set echo = FALSE in the header of every code chunk to avoid printing the code)
knitr::opts_chunk$set(
echo = FALSE,  # don't print the code chunk
warning = FALSE,  # don't print warnings
message = FALSE,  # don't print messages
fig.width = 6,  # set default width of figures
fig.height = 4,  # set default height of figures
fig.align = "center",  # always align figure in center
fig.pos = "H",  # always plot figure at the exact location of the code chunk
cache = FALSE)  # setting cache = TRUE will save the output of the evaluated code chunk locally so that when you knit the file in the future, Rmd does not re-evaluate the code chunk if the code chunk has not changed from the previous knit. This can save time (particularly if your code is computationally expensive), but this may lead to obscure errors - e.g., if you update an external file such as load.R, then Rmd may not recognize that clean.R has changed and will not update clean.R. This caveat should not deter you from setting cache = T. It is just good to keep in mind (and for debugging)
# load useful libraries
library(tidyverse)
library(knitr)
library(R.utils)
library(kableExtra)
gdp_stats <- gapminder %>%
group_by(continent) %>%
summarise(mean = mean(gdp_per_cap),
var = var(gdp_per_cap))
kable(gdp_stats,
booktabs = T, linesep = "", format = "latex",
caption = "We show the mean GDP per capita for various continents along with its variance.") %>%
kable_styling(latex_options = c("hold_position", "striped"))
kable(gdp_stats,
booktabs = T, linesep = "", format = "latex",
caption = "We show the mean GDP per capita for various continents along with its variance.") %>%
kable_styling(latex_options = c("hold_position", "striped"))
kable(gdp_stats,
booktabs = T, linesep = "", format = "latex",
caption = "We show the mean GDP per capita for various continents along with its variance.") %>%
kable_styling(latex_options = c("hold_position", "striped"))
kable(gdp_stats,
booktabs = T, linesep = "", format = "latex",
caption = "We show the mean GDP per capita for various continents along with its variance.") %>%
kable_styling(latex_options = c("hold_position", "striped"))
# load the wide format of the data
gapminder_wide <- loadGapminderData(path = "data/",
filename = "gapminder_wide.csv")
# look at wide_data compared to original
dim(gapminder_wide)
dim(gapminder)
head(gapminder_wide)[, c(1:4, 37:38)]
head(gapminder)
# setting default knitr options (this will save you typing; this way, you no longer have to set echo = FALSE in the header of every code chunk to avoid printing the code)
knitr::opts_chunk$set(
echo = FALSE,  # don't print the code chunk
warning = FALSE,  # don't print warnings
message = FALSE,  # don't print messages
fig.width = 6,  # set default width of figures
fig.height = 4,  # set default height of figures
fig.align = "center",  # always align figure in center
fig.pos = "H",  # always plot figure at the exact location of the code chunk
cache = FALSE)  # setting cache = TRUE will save the output of the evaluated code chunk locally so that when you knit the file in the future, Rmd does not re-evaluate the code chunk if the code chunk has not changed from the previous knit. This can save time (particularly if your code is computationally expensive), but this may lead to obscure errors - e.g., if you update an external file such as load.R, then Rmd may not recognize that clean.R has changed and will not update clean.R. This caveat should not deter you from setting cache = T. It is just good to keep in mind (and for debugging)
# load useful libraries
library(tidyverse)
library(knitr)
library(R.utils)
library(kableExtra)
# can source each file individually
# source("R/load.R")
# source("R/clean.R")
# source("R/utils.R")
# or can source all files in the R/ directory
sourceDirectory("./R/", modifiedOnly = F, recursive = F) # useful functions
# load the original gapminder data
gapminder_orig <- loadGapminderData()
# clean the gapminder data
gapminder <- cleanGapminderData(gapminder_orig)
gapminder07 <- gapminder %>%
filter(year == 2007)
# start with a blank ggplot layer. Input the gapminder data frame.
ggplot(gapminder07) +
# add a scatter layer
geom_point(aes(x = gdp_per_cap, y = life_exp,
size = population,
col = continent),
alpha = 0.6) +
# label the outlying data points
geom_text(aes(x = gdp_per_cap + 500, y = life_exp, label = country),
hjust = 0,
size = 2,
data = filter(gapminder,
gdp_per_cap > 9000, life_exp < 60, year == 2007)) +
# add a nice theme
theme_nice +
scale_x_log10() +
xlab("GDP per capita (log10)") +
ylab("Life expectancy") +
ggtitle("Life expectancy versus GDP for 2007")
gapminder %>%
# remove Oceania
filter(continent != "Oceania") %>%
# input data frame into ggplot base function
ggplot() +
# make a separate plot for each continent
facet_wrap(~continent) +
# add a boxplot layer grouped by year
geom_boxplot(aes(x = year, y = life_exp, group = year), fill = "grey90") +
# add a nice theme
theme_nice +
xlab("Year") +
ylab("Life expectancy") +
ggtitle("Life expectancy over time")
# calculate the avergae GDP per cap for different continents
tapply(X = gapminder$gdp_per_cap,
INDEX = gapminder$continent,
FUN = mean)
tapply(X = gapminder$gdp_per_cap,
INDEX = gapminder$continent,
FUN = var)
# the following code is very inneficient (it violates DRY)
# it is also hard to read
mean(gapminder[gapminder$continent == "Africa", ]$gdp_per_cap)
mean(gapminder[gapminder$continent == "Europe", ]$gdp_per_cap)
mean(gapminder[gapminder$continent == "Americas", ]$gdp_per_cap)
mean(gapminder[gapminder$continent == "Asia", ]$gdp_per_cap)
gdp_stats <- gapminder %>%
group_by(continent) %>%
summarise(mean = mean(gdp_per_cap),
var = var(gdp_per_cap))
kable(gdp_stats,
booktabs = T, linesep = "", format = "latex", digits = 2,
caption = "We show the mean GDP per capita for various continents along with its variance.") %>%
kable_styling(latex_options = c("hold_position", "striped"))
# the following is less repetitive, and much more readible!
total_gdp_table <- gapminder %>%
# filter to rows from the year 2007
filter(year == 2007) %>%
# define a variable equal to the total GDP
mutate(gdp_total = gdp_per_cap * population / 1000000000) %>%
# calculate the average GDP for all continents
group_by(continent) %>%
summarise(countries = n(), # add up the number of countries
mean = round(mean(gdp_total)), # average GDP
SD = round(sd(gdp_total))) %>%
# arrange the rows in order of decreasing average GDP
arrange(desc(mean))
# print a LaTeX table displaying this data
kable(total_gdp_table,
booktabs = T, linesep = "", format = "latex",
caption = paste("A table displaying the mean and standard deviation",
"of GDP (in billions) in 2007 for each continent")) %>%
kable_styling(latex_options = c("hold_position", "striped"))
# load the wide format of the data
gapminder_wide <- loadGapminderData(path = "data/",
filename = "gapminder_wide.csv")
# look at wide_data compared to original
dim(gapminder_wide)
dim(gapminder)
head(gapminder_wide)[, c(1:4, 37:38)]
head(gapminder)
# first use gather() to create a long version of the data where we only have 4 columns, one each for continent and country, one (obstype_year) that gives the key for the values (obs_values) in the fourth column.
gapminder_long <- gapminder_wide %>%
gather(key   = obstype_year, # name new column for ID variable
value = obs_values,   # name column that will contain the observations
starts_with("pop"),             # only include columns that start
starts_with("lifeExp"),         # pop, lifeExp, or gdpPercap
starts_with("gdpPercap"))
# head(gapminder_long)
# tail(gapminder_long)
# next separate the obstype_year variable into two separate columns, one that contains the year of the observation and another that tells whether the values in obs_values is gdp, life expectancy, or population.
gapminder_long <- gapminder_long %>%
separate(obstype_year,
into = c("obs_type", "year"),
sep = "_")
# head(gapminder_long)
# tail(gapminder_long)
gapminder_normal <- gapminder_long %>%
spread(obs_type, obs_values)
# check that is looks like the original data
# head(gapminder_normal)
# dim(gapminder_normal)
# dim(gapminder_long)
str(gapminder)
ggpairs(data = gapminder)
library(GGally)
ggpairs(data = gapminder)
ggpairs(data = gapminder,
columns = 2:6)
str(gapminder)
# show pairwise relationships among the continuous features in data
gapminder_cts <- gapminder %>%
select_if(is.numeric)
str(gapminder_cts)
ggpairs(data = gapminder_cts)
ggpairs(data = gapminder,
columns = 2:6)
? ggpairs
str(gapminder)
ggpairs(data = gapminder_cts,
mapping = aes(color = continent))
ggpairs(data = gapminder,
columns = c(2, 3, 5, 6),
mapping = aes(color = continent))
ggpairs(data = gapminder %>% mutate(year = as.factor(year)),
columns = c(2, 3, 5, 6),
mapping = aes(color = continent))
ggpairs(data = gapminder %>% mutate(year = as.factor(year)),
columns = c(3, 5, 6),
mapping = aes(color = continent))
? ggpairs
ggpairs(data = gapminder %>% mutate(year = as.factor(year)),
columns = c(3, 5, 6),
mapping = aes(color = continent),
lower = list(continuous = wrap(alpha = .5)),
diag = list(continuous = wrap(alpha = .5)))
ggpairs(data = gapminder %>% mutate(year = as.factor(year)),
columns = c(3, 5, 6),
mapping = aes(color = continent),
lower = list(continuous = wrap("points", alpha = .5)),
diag = list(continuous = wrap("densityDiag", alpha = .5)))
# show pairwise relationships among the continuous features in data
gapminder_pairs <- gapminder %>%
mutate(population = log10(population))
ggpairs(data = gapminder_pairs %>% mutate(year = as.factor(year)),
columns = c(2, 3, 5, 6),
mapping = aes(color = continent),
lower = list(continuous = wrap("points", alpha = .5)),
diag = list(continuous = wrap("densityDiag", alpha = .5)))
? geom_poinggpairs(data = gapminder %>% mutate(population = log10(population)),
# which columns to plot
columns = c(3, 5, 6),
# set color aesthetic
mapping = aes(color = continent),
# set geom_point(alpha = ) for continuous variables in lower plots
lower = list(continuous = wrap("points", alpha = .5)),
# set geom_density(alpha = ) for continuous variables in diagonal plots
diag = list(continuous = wrap("densityDiag", alpha = .5)))
ggpairs(data = gapminder %>% mutate(population = log10(population)),
# which columns to plot
columns = c(3, 5, 6),
# set color aesthetic
mapping = aes(color = continent),
# set geom_point(alpha = ) for continuous variables in lower plots
lower = list(continuous = wrap("points", alpha = .5)),
# set geom_density(alpha = ) for continuous variables in diagonal plots
diag = list(continuous = wrap("densityDiag", alpha = .5)))
ggpairs(data = gapminder %>% mutate(population = log10(population)),
# which columns to plot
columns = c(3, 5, 6),
# set color aesthetic
mapping = aes(color = continent),
# set geom_point(alpha = , size = ) for continuous vars in lower plots
lower = list(continuous = wrap("points", alpha = .5, size = 1)),
# set geom_density(alpha = ) for continuous vars in diagonal plots
diag = list(continuous = wrap("densityDiag", alpha = .5, size = 1)))
ggpairs(data = gapminder %>% mutate(population = log10(population)),
# which columns to plot
columns = c(3, 5, 6),
# set color aesthetic
mapping = aes(color = continent),
# set geom_point(alpha = , size = ) for continuous vars in lower plots
lower = list(continuous = wrap("points", alpha = .5, size = .5)),
# set geom_density(alpha = ) for continuous vars in diagonal plots
diag = list(continuous = wrap("densityDiag", alpha = .5)))
ggpairs(data = gapminder %>% mutate(population = log10(population)),
# which columns to plot
columns = c(3, 5, 6),
# set color aesthetic
mapping = aes(color = continent),
# set geom_point(alpha = , size = ) for continuous vars in lower plots
lower = list(continuous = wrap("points", alpha = .25, size = .5)),
# set geom_density(alpha = ) for continuous vars in diagonal plots
diag = list(continuous = wrap("densityDiag", alpha = .5)))
ggpairs(data = gapminder %>% mutate(population = log10(population)),
# which columns to plot
columns = c(3, 5, 6),
# set color aesthetic
mapping = aes(color = continent),
# set geom_point(alpha = , size = ) for continuous vars in lower plots
lower = list(continuous = wrap("points", alpha = .4, size = .5)),
# set geom_density(alpha = ) for continuous vars in diagonal plots
diag = list(continuous = wrap("densityDiag", alpha = .5)))
ggpairs(data = gapminder %>% mutate(population = log10(population)),
# which columns to plot
columns = c(3, 5, 6),
# set color aesthetic
mapping = aes(color = continent),
# set geom_point(alpha = , size = ) for continuous vars in lower plots
lower = list(continuous = wrap("points", alpha = .5, size = .25)),
# set geom_density(alpha = ) for continuous vars in diagonal plots
diag = list(continuous = wrap("densityDiag", alpha = .5)))
ggpairs(data = gapminder %>% mutate(population = log10(population),
gdp_per_cap = log10(gdp_per_cap)),
# which columns to plot
columns = c(3, 5, 6),
# set color aesthetic
mapping = aes(color = continent),
# set geom_point(alpha = , size = ) for continuous vars in lower plots
lower = list(continuous = wrap("points", alpha = .5, size = .25)),
# set geom_density(alpha = ) for continuous vars in diagonal plots
diag = list(continuous = wrap("densityDiag", alpha = .5)))
ggpairs(data = gapminder %>% mutate(population = log10(population),
gdp_per_cap = log10(gdp_per_cap)),
columns = 2:6)
ggpairs(data = gapminder %>% mutate(population = log10(population),
gdp_per_cap = log10(gdp_per_cap)),
columns = 3:6,
# set geom_point(alpha = , size = ) for continuous vars in lower plots
lower = list(continuous = wrap("points", alpha = .5, size = .25)),
# set geom_density(alpha = ) for continuous vars in diagonal plots
diag = list(continuous = wrap("densityDiag", alpha = .5)))
ggpairs(data = gapminder %>% mutate(population = log10(population),
gdp_per_cap = log10(gdp_per_cap)),
columns = 3:6,
mapping = aes(color = continent),
# set geom_point(alpha = , size = ) for continuous vars in lower plots
lower = list(continuous = wrap("points", alpha = .5, size = .25)),
# set geom_density(alpha = ) for continuous vars in diagonal plots
diag = list(continuous = wrap("densityDiag", alpha = .5)))
ggpairs(data = gapminder %>% mutate(population = log10(population),
gdp_per_cap = log10(gdp_per_cap)),
# which columns to plot
columns = c(3, 5, 6),
# set color aesthetic
mapping = aes(color = continent),
# set geom_point(alpha = , size = ) for continuous vars in lower plots
lower = list(continuous = wrap("points", alpha = .5, size = .25)),
# set geom_density(alpha = ) for continuous vars in diagonal plots
diag = list(continuous = wrap("densityDiag", alpha = .5)),
upper = list(continuous = wrap("cor", size = 3)))
str(gapminder)
library(superheat)
? superheat
life_exp_wide <- gapminder %>%
select(country, year, life_exp) %>%
spread(key = "year", value = "life_exp")
str(life_exp_wide)
superheat(life_exp_wide)
life_exp_wide <- gapminder %>%
select(country, year, life_exp) %>%
spread(key = "year", value = "life_exp") %>%
column_to_rownames("country")
superheat(life_exp_wide)
? superheat
superheat(life_exp_wide,
pretty.order.cols = TRUE,
clustering.method = "hierarchical",
linkage.method = "ward.D",
left.label = "variable")
superheat(life_exp_wide,
pretty.order.rows = TRUE,
clustering.method = "hierarchical",
linkage.method = "ward.D",
left.label = "variable")
superheat(life_exp_wide,
pretty.order.rows = TRUE,
clustering.method = "hierarchical",
linkage.method = "ward.D",
force.left.label = TRUE)
superheat(life_exp_wide,
pretty.order.rows = TRUE,
clustering.method = "hierarchical",
linkage.method = "ward.D",
force.left.label = TRUE,
left.label.text.size = 1)
superheat(life_exp_wide,
pretty.order.rows = TRUE,
clustering.method = "hierarchical",
linkage.method = "ward.D",
force.left.label = TRUE,
left.label.text.size = 2)
library(viridis)
? scale_color_virids
? scale_color_viridis
total_gdp_table
total_gdp_table$mean["Asia"]
total_gdp_table["Asia", "mean"]
total_gdp_table
total_gdp_table$mean
total_gdp_table["Asia"]
total_gdp_table[["Asia"]]
str(gapminder)
